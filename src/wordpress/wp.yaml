# kubetpl:syntax:$

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc-$NAMESPACE-$WP_NUMBER
  namespace: $NAMESPACE
  labels: 
    tier: prod
    name: db
    app: mysql
    group: $NAMESPACE
  annotations:
    volume.beta.kubernetes.io/storage-class: portworx-sc-repl3-snap60
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wp-pv-$NAMESPACE-$WP_NUMBER
  namespace: $NAMESPACE
  labels:
    tier: prod-$WP_NUMBER
    name: db-$WP_NUMBER
    app: wordpress-$WP_NUMBER
  annotations:
    volume.beta.kubernetes.io/storage-class: portworx-sc-repl3-shared-snap60
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress-mysql-$WP_NUMBER
  namespace: $NAMESPACE
  labels:
    app: wordpress-mysql-$WP_NUMBER
spec:
  ports:  
    - port: $MYSQL_PORT
      targetPort: 3306
  selector:
    app: wordpress-mysql-$WP_NUMBER
    tier: mysql-$WP_NUMBER
  # clusterIP: None
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: wordpress-mysql-$WP_NUMBER
  namespace: $NAMESPACE
  labels:
    app: wordpress-mysql-$WP_NUMBER
spec:
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: wordpress-mysql-$WP_NUMBER
        tier: mysql-$WP_NUMBER
    spec:
      # Use the stork scheduler to enable more efficient placement of the pods
      schedulerName: stork
      containers:
      - image: mysql:5.6
        imagePullPolicy: 
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: password
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc-$NAMESPACE-$WP_NUMBER
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress-$WP_NUMBER
  namespace: $NAMESPACE
  labels:
    app: wordpress-$WP_NUMBER
spec:
  ports:
    - port: $WP_PORT
      targetPort: 80
  selector:
    app: wordpress-$WP_NUMBER
    tier: frontend-$WP_NUMBER
  type: NodePort
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: wordpress-$WP_NUMBER
  namespace: $NAMESPACE
  labels:
    app: wordpress-$WP_NUMBER
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: wordpress-$WP_NUMBER
        tier: frontend-$WP_NUMBER
    spec:
      # Use the stork scheduler to enable more efficient placement of the pods
      schedulerName: stork
      containers:
      - image: wordpress:4.8-apache
        name: wordpress
        imagePullPolicy: 
        env:
        - name: WORDPRESS_DB_HOST
          value: wordpress-mysql-$WP_NUMBER
        - name: WORDPRESS_DB_PASSWORD
          value: password
        ports:
        - containerPort: 80
          name: wordpress
        volumeMounts:
        - name: wordpress-persistent-storage
          mountPath: /var/www/html
      volumes:
      - name: wordpress-persistent-storage
        persistentVolumeClaim:
          claimName: wp-pv-$NAMESPACE-$WP_NUMBER